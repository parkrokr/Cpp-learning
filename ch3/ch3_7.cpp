 //이진수 Binary NUmbers

#include<iostream>

int main()
{
	/* 10진수
	0
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10 = 10^1 + 0
	11
	12	
	...
	337 = 300 + 30 + 7 = 10^2 *3 + 10^2 *3 + 10^1 *3 = 10^0 *7
	*/

	/*2진수
	0
	1
	10 = 2^1*1 + 2^0 *0 = 2
	11 = 2^1*1 + 2^0 *1 = 3
	
	// 2진수 더하기
	  1
	  11
	  +1
	-----
	 100
	 
	 // 2진수를 10진수로 바꾸기 binary to decimal

	 7654 3210
	 0101 1110

	 2^7*0 + 2^6*1 + 2^4*0 + 2^3*1 + 2^2*1 + 2^1*1 + 2^0*0
	 = 128*0 + 64*1 + 32*0 + 16*1 + 8*1 + 4*1 + 2*1 + 1*0
	 = 64 +16 + 8 + 4 + 2
	 = 94


	 // 10진수를 2진수로 바꾸기 decimal to binary

	 148

	 148 / 2 = 74 r0 ( r = remainder 나머지)
	 74  / 2 = 37 r0
	 37  / 2 = 18 r1
	 18  / 2 = 9  r0
	 9   / 2 = 4  r1
	 4   / 2 = 2  r0
	 2   / 2 = 1  r0
	 1   / 2 = 0  r1

	 10010100

	 1 2 4 8 16 32 64 128 512 1024 ...

	 148 >= 128              Yes-> 128=2^7, 8번째 자리가 1
	 148-128 = 20, 20 >= 64  No -> 64 =2^6, 7번째 자리가 0
				   20 >= 32  No -> 32 =2^5, 6번째 자리가 0
				   20 >= 16  Yes-> 16 =2^4, 5번째 자리가 1
	 20 -16 =4,     4 >=  8  No -> 8  =2^3, 4번째 자리가 0
	                4 >=  4  Yes-> 4  =2^2, 3번째 자리가 1
     4 -4 = 0,

	 1001 0100


	 // 2진수 끼리 더하기
     11
	 0110( 6 in decimal)
	 0111( 7 in decimal)
 	 -------
	 1101 = 13 in decimal


	 // 음의 정수

	 음의 10진수를 2진수로 바꾸기
	 
	 -5

	 0000 0101  ( 5만 2진수로 바꾸기)
	   보수 ( complement)
	 1111 1010 
	    1 더하기
	 1111 1011 <-  -5

	 맨 앞에 숫자는 부호를 표현 0 은 양수 , 1 은 음수

	 // 1을 더하지 않으면 0이 두가지로 표현될 수 있음

	 
	 양의 정수 0
	 0000 0000
	   보수
	 1111 1111
	    1 더하기
	 0000 0000  -> 음의 정수 0


	 음의 2진수를 10 진수로 바꾸기
	 1001 1110
	    보수
	 0110 0001
	    1 더하기
	 0110 0010  -> 98  -> -98


	 // signed vs unsigned
	 같은 2진수라도 type 에 따라 10진수로 표현시 달라질 수 있음

	 signed
	 1001 1110 -> 2^7*1 + 2^4*1 + 2^3*1 + 2^2*1 + 2^1*1 = 128+16+8+4+2 = 158
	 
	 unsigned
	 1001 1110 -> 2^4*1 + 2^3*1 + 2^2*1 + 2^1*1         = 16+8+4+2 = 30    -> 30


	*/
	return 0;
}